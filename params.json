{"name":"Unity","tagline":"Kurs i Unity høsten 2015","body":"# Tanks\r\nDenne oppgaven tar utgangspunkt i [dette](http://unity3d.com/learn/tutorials/projects/tanks-tutorial) prosjektet på Unity sine sider.\r\n\r\nFørst så må vi starte Unity og velge et nytt prosjekt. Prosjektet kan man kalle hva man selv vil, vi kommer til å kalle det for Tanks i denne tutorialen. Når vi har åpnet Unity så må vi laste ned alle prosjekt filene, dette gjør vi ved å velge **Window** oppe på verktøylinjen og velger **Asset Store**. Inne i **Asset Store** så søker vi på **Tanks Tutorial**. Når vi har funnet prosjektet så klikker vi på Download og Import etter nedlastingen er ferdig.\r\n\r\n\r\n## 1 Sette Opp Prosjektet\r\n\r\n- Velg `File -> New Scene` oppe på verktøylinjen for å lage en ny Scene, lagre den nye scenen som `Main` i `Scenes` mappen.\r\n- Slett lyskilden som heter `Directional Light` i hierarkiet fra scenen.\r\n- Dra `Prefaben` som heter **Level Art** inn i hierarkiet. Denne ligger i mappen `Prefabs` i prosjektet:\r\n\r\n![ScreenShot](Pictures/levelart.png)\r\n\r\n- Fra `Window` menyen, åpne `Lighting` panelet. På dette panelet så skrur vi av **Auto** helt nederst på vinduet og **Baked GI**. Under **Precomputed Realtime GI** så setter vi `Realtime Resolution` til 0.5:\r\n\r\n![ScreenShot](Pictures/bakedgi.png)\r\n\r\n- Under **Environment Lighting** forandre `Ambient Source` fra `Skybox` til `Color` og bytt fargen til RGB verdiene (72,62,113).\r\n- Klikk Build nederst på Panelet.\r\n- Lukk `Lighting` panelet, eller klikk på `Inspector` panelet.\r\n- Velg `Main Camera` fra hierarkiet og bytt posisjon til (-43,42,-25)\r\n- Bytt rotasjon til (40,60,0)\r\n- Forandre kameraet sin `Projection` til `Ortographic`\r\n- Forandre kameraet sin `Clear Flags` fra `Skybox` til `Solid Color`.\r\n- Forandre `Background` farge til RGB (80,60,50)\r\n- Lagre Scenen din.\r\n\r\n![ScreenShot](Pictures/camerasetup.png)\r\n\r\n# Miniquiz\r\n\r\n### Hva kalles de tre koordinatene vi bruker til å si posisjonen til noe i Unity?\r\n1. ZXE\r\n2. BHD\r\n3. XYZ\r\n4. ABC\r\n\r\n### Hvilke 3 farger består RGB av?\r\n1. Rød, Gul, Brun\r\n2. Rosa, Grønn, Beige\r\n3. Rosa, Grønn, Burgunder\r\n4. Rød, Grønn, Blå\r\n\r\n\r\n\r\n\r\n## 2 Lage En Tank\r\n\r\n- Under mappen `Models` finner du en modell som heter `Tank`. Dra denne inn i hierarkiet, på samme måte som vi gjorde med `LevelArt`.\r\n- Forandre `Layer` til tanksen slik at den ligger på `Players` layeret. I Dialogboksen velger du `No, for this object only`\r\n\r\n![ScreenShot](Pictures/tanklayer.png)\r\n\r\n- Legg til en `Rigidbody` til tanksen.\r\n- Under `Constraints` inne i `Rigidbody`, huk av for `Freeze Position` på Y-aksen, og huk av for `Freeze Rotation` på X-aksen og Z-aksen.\r\n- Legg til en `Box Collider` på tanksen og forandre `Center` til (0, 0.85, 0) og forandre størrelsen til (1.5, 1.7, 1.6).\r\n- Legg til en `Audio Source` til tanksen vår og forandre `Audio Clip` til `Engine Idle`. Huk også av for `Loop`.\r\n\r\n![ScreenShot](Pictures/audiosource.png)\r\n\r\n- Legg til en ekstra `Audio Source` på tanksen vår og slå av `Play On Awake`.\r\n- Velg `Prefabs` mappen i prosjektet vårt og dra tanksen ned til mappen, det som skjer er at vi lager en `Prefab` av tanksen vi har lagd til nå. En `Prefab` er et ferdiglaget objekt som inneholder alt vi har lagt til tanksen vår til nå.\r\n\r\n![ScreenShot](Pictures/tankprefab.png)\r\n\r\n- Fra `Prefabs` mappen, dra `DustTrail` prefaben til tanksen vår i hierarkiet, slik at den blir en `Child` av tanks objektet vårt.\r\n- Dupliser `DustTrail` ved å bruke Ctrl + D slik at vi får to `DustTrail` på tanksen vår. Gi den nye `DustTrail` navnet `LeftDustTrail` og den andre navnet `RightDustTrail`.\r\n- Sett posisjonen til `LeftDustTrail` til (-0.5, 0, -0.75) og posisjonen til `RightDustTrail` til (0.5, 0, -0.75)\r\n\r\n### Tid for litt Kode\r\n- I `Scripts/Tank` folderen så finner vi et script som heter `TankMovement`, dra denne over på tanksen vår i hierarkiet.\r\n- Dobbelklikk på `TankMovement` scriptet for å åpne scriptet i Visual Studio eller MonoDevelop.\r\n- I scriptet så har vi noen ferdiglagde funksjoner, disse er kommentert ut, så vi må fjerne kommentar tegnene `/* */`\r\n- Koden for scriptet ligger under, men vi vil gjerne tenke oss frem til hva vi vil gjøre først.\r\n\r\n```\r\n\r\n    private void Update ()\r\n    {\r\n        // Store the value of both input axes.\r\n        m_MovementInputValue = Input.GetAxis (m_MovementAxisName);\r\n        m_TurnInputValue = Input.GetAxis (m_TurnAxisName);\r\n\r\n        EngineAudio ();\r\n    }\r\n\r\n\r\n    private void EngineAudio ()\r\n    {\r\n        // If there is no input (the tank is stationary)...\r\n        if (Mathf.Abs (m_MovementInputValue) < 0.1f && Mathf.Abs (m_TurnInputValue) < 0.1f)\r\n        {\r\n            // ... and if the audio source is currently playing the driving clip...\r\n            if (m_MovementAudio.clip == m_EngineDriving)\r\n            {\r\n                // ... change the clip to idling and play it.\r\n                m_MovementAudio.clip = m_EngineIdling;\r\n                m_MovementAudio.pitch = Random.Range (m_OriginalPitch - m_PitchRange, m_OriginalPitch + m_PitchRange);\r\n                m_MovementAudio.Play ();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // Otherwise if the tank is moving and if the idling clip is currently playing...\r\n            if (m_MovementAudio.clip == m_EngineIdling)\r\n            {\r\n                // ... change the clip to driving and play.\r\n                m_MovementAudio.clip = m_EngineDriving;\r\n                m_MovementAudio.pitch = Random.Range(m_OriginalPitch - m_PitchRange, m_OriginalPitch + m_PitchRange);\r\n                m_MovementAudio.Play();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void FixedUpdate ()\r\n    {\r\n        // Adjust the rigidbodies position and orientation in FixedUpdate.\r\n        Move ();\r\n        Turn ();\r\n    }\r\n\r\n\r\n    private void Move ()\r\n    {\r\n        // Create a vector in the direction the tank is facing with a magnitude based on the input, speed and the time between frames.\r\n        Vector3 movement = transform.forward * m_MovementInputValue * m_Speed * Time.deltaTime;\r\n\r\n        // Apply this movement to the rigidbody's position.\r\n        m_Rigidbody.MovePosition(m_Rigidbody.position + movement);\r\n    }\r\n\r\n\r\n    private void Turn ()\r\n    {\r\n        // Determine the number of degrees to be turned based on the input, speed and time between frames.\r\n        float turn = m_TurnInputValue * m_TurnSpeed * Time.deltaTime;\r\n\r\n        // Make this into a rotation in the y axis.\r\n        Quaternion turnRotation = Quaternion.Euler (0f, turn, 0f);\r\n\r\n        // Apply this rotation to the rigidbody's rotation.\r\n        m_Rigidbody.MoveRotation (m_Rigidbody.rotation * turnRotation);\r\n    }\r\n```\r\n\r\n\r\n\r\n### Hva er en Prefab?\r\n1. En Unity pakke for Grafikk\r\n2. Et ferdiglagd objekt som vi kan bruke i Unity\r\n3. Et bilde\r\n4. En ny smarttelefon","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}